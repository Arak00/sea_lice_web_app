import streamlit as st
from PIL import Image
import io
import base64
import numpy as np
import matplotlib.pyplot as plt

# Fonction de simulation pour remplacer le mod√®le TensorFlow
def simulate_prediction(image):
    # Cette fonction simule une pr√©diction sans utiliser TensorFlow
    # Vous pouvez ajuster les valeurs pour d√©montrer diff√©rents sc√©narios
    # Ici, nous g√©n√©rons une pr√©diction al√©atoire mais biais√©e
    
    # Convertir l'image en array et extraire quelques caract√©ristiques simples
    img_array = np.array(image)
    avg_pixel = np.mean(img_array)
    
    # Utiliser ces caract√©ristiques pour g√©n√©rer une pr√©diction simul√©e
    # Plus la valeur moyenne des pixels est √©lev√©e, plus la probabilit√© d'infection est √©lev√©e
    base_prob = avg_pixel / 255.0  # Normaliser entre 0 et 1
    prediction = min(max(base_prob * 1.2, 0.1), 0.9)  # Ajuster pour √©viter les extr√™mes
    
    return prediction

# Interface utilisateur Streamlit
def main():
    st.set_page_config(
        page_title="Syst√®me de D√©tection de Poux de Mer (Version D√©mo)",
        page_icon="üêü",
        layout="wide"
    )
    
    # En-t√™te principal
    st.title("Syst√®me de D√©tection de Poux de Mer (Version D√©mo)")
    st.markdown("""
    Cette version de d√©monstration simule la d√©tection de poux de mer chez les saumons.
    T√©l√©chargez une image de saumon pour voir une analyse simul√©e.
    """)
    
    # Zone de t√©l√©chargement d'image
    uploaded_file = st.file_uploader("Choisir une image...", type=["jpg", "jpeg", "png", "bmp"])
    
    if uploaded_file is not None:
        # Afficher l'image originale
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Image t√©l√©charg√©e")
            image = Image.open(uploaded_file)
            st.image(image, caption="Image originale", use_column_width=True)
        
        # Simuler la pr√©diction
        with st.spinner("Analyse en cours..."):
            prediction = simulate_prediction(image)
            is_infected = prediction > 0.5
            confidence = prediction * 100
        
        # Afficher les r√©sultats
        with col2:
            st.subheader("R√©sultat de l'analyse")
            
            if is_infected:
                st.error("**INFECT√â**: Poux de mer d√©tect√©s")
            else:
                st.success("**SAIN**: Aucun poux de mer d√©tect√©")
            
            st.metric("Niveau de confiance", f"{confidence:.1f}%")
            
            # Cr√©er un graphique de probabilit√©
            fig, ax = plt.subplots(figsize=(8, 4))
            categories = ['Sain', 'Infect√©']
            values = [1 - prediction, prediction]
            colors = ['#4CAF50', '#f44336']
            
            ax.bar(categories, values, color=colors)
            ax.set_ylim(0, 1)
            ax.set_ylabel('Probabilit√©')
            ax.set_title('Probabilit√© de classification')
            
            st.pyplot(fig)
    
    # Onglets d'information
    st.markdown("---")
    tab1, tab2, tab3 = st.tabs(["√Ä propos du syst√®me", "Comment √ßa marche", "Version compl√®te"])
    
    with tab1:
        st.header("√Ä propos du Syst√®me de D√©tection de Poux de Mer")
        st.markdown("""
        Ce projet impl√©mente une solution de vision par ordinateur pour d√©tecter les infections de poux de mer dans les exploitations d'√©levage de saumons.
        
        **Note** : Cette version de d√©monstration simule les r√©sultats et ne contient pas le mod√®le d'IA complet pour des raisons de compatibilit√© d'h√©bergement.
        """)
    
    with tab2:
        st.header("Comment √ßa marche")
        st.markdown("""
        Dans la version compl√®te, le syst√®me fonctionne en plusieurs √©tapes :
        
        1. **Pr√©traitement de l'image** : L'image t√©l√©charg√©e est redimensionn√©e et normalis√©e.
        2. **Analyse par IA** : L'image pr√©trait√©e est analys√©e par un mod√®le d'apprentissage profond.
        3. **Classification** : Le mod√®le d√©termine si l'image montre un saumon sain ou infect√©.
        
        Cette version de d√©monstration simule ces √©tapes pour montrer l'interface utilisateur.
        """)
    
    with tab3:
        st.header("Acc√©der √† la version compl√®te")
        st.markdown("""
        La version compl√®te de cette application avec les mod√®les d'IA r√©els est disponible sur GitHub :
        
        [https://github.com/Arak00/sea-lice-detector](https://github.com/Arak00/sea-lice-detector)
        
        Vous pouvez t√©l√©charger le code source et l'ex√©cuter localement avec toutes les fonctionnalit√©s.
        """)

if __name__ == "__main__":
    main()
