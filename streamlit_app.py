import os
import sys
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
import cv2
import matplotlib.pyplot as plt
import streamlit as st
from PIL import Image
import io
import base64

# Ajouter le r√©pertoire parent au chemin pour importer config
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from sea_lice_detection.src.config import MODEL_DIR, IMG_WIDTH, IMG_HEIGHT

# Variables globales pour les mod√®les
resnet_model = None
efficientnet_model = None

def load_models():
    global resnet_model, efficientnet_model
    
    # Charger le mod√®le ResNet50
    resnet_path = os.path.join(MODEL_DIR, "resnet50_sea_lice_detector_best.h5")
    if not os.path.exists(resnet_path):
        resnet_path = os.path.join(MODEL_DIR, "resnet50_sea_lice_detector_final.h5")
    
    # Charger le mod√®le EfficientNet
    efficientnet_path = os.path.join(MODEL_DIR, "efficientnet_sea_lice_detector_best.h5")
    if not os.path.exists(efficientnet_path):
        efficientnet_path = os.path.join(MODEL_DIR, "efficientnet_sea_lice_detector_final.h5")
    
    try:
        if os.path.exists(resnet_path):
            resnet_model = load_model(resnet_path)
            st.sidebar.success(f"Mod√®le ResNet50 charg√©")
        else:
            st.sidebar.warning(f"Fichier de mod√®le ResNet50 non trouv√©")
            resnet_model = create_demo_model()
            
        if os.path.exists(efficientnet_path):
            efficientnet_model = load_model(efficientnet_path)
            st.sidebar.success(f"Mod√®le EfficientNet charg√©")
        else:
            st.sidebar.warning(f"Fichier de mod√®le EfficientNet non trouv√©")
            efficientnet_model = create_demo_model()
            
    except Exception as e:
        st.sidebar.error(f"Erreur lors du chargement des mod√®les: {e}")
        resnet_model = create_demo_model()
        efficientnet_model = create_demo_model()

def create_demo_model():
    """Cr√©er un mod√®le simple √† des fins de d√©monstration si le mod√®le entra√Æn√© n'est pas disponible"""
    inputs = tf.keras.Input(shape=(IMG_HEIGHT, IMG_WIDTH, 3))
    x = tf.keras.layers.Conv2D(32, (3, 3), activation='relu')(inputs)
    x = tf.keras.layers.MaxPooling2D((2, 2))(x)
    x = tf.keras.layers.Flatten()(x)
    x = tf.keras.layers.Dense(64, activation='relu')(x)
    outputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)
    
    model = tf.keras.Model(inputs=inputs, outputs=outputs)
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    st.sidebar.info("Mod√®le de d√©monstration cr√©√©")
    return model

def process_image(uploaded_file):
    # Lire l'image depuis le fichier t√©l√©charg√©
    image_bytes = uploaded_file.getvalue()
    nparr = np.frombuffer(image_bytes, np.uint8)
    img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    
    # Convertir BGR en RGB
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    
    # Redimensionner l'image aux dimensions requises
    processed_img = cv2.resize(img, (IMG_WIDTH, IMG_HEIGHT))
    
    return processed_img, img

def predict_sea_lice(processed_img, model_type='ResNet50'):
    # Normaliser l'image
    img = processed_img.astype('float32') / 255.0
    
    # √âtendre les dimensions pour correspondre √† la forme d'entr√©e du mod√®le
    img = np.expand_dims(img, axis=0)
    
    # Faire la pr√©diction
    if model_type == 'ResNet50':
        prediction = resnet_model.predict(img)[0][0]
    else:
        prediction = efficientnet_model.predict(img)[0][0]
    
    # D√©terminer le r√©sultat
    confidence = prediction * 100
    is_infected = prediction > 0.5
    
    return is_infected, confidence, prediction

def main():
    st.set_page_config(
        page_title="Syst√®me de D√©tection de Poux de Mer",
        page_icon="üêü",
        layout="wide"
    )
    
    # Charger les mod√®les
    load_models()
    
    # Sidebar
    st.sidebar.title("Options")
    model_type = st.sidebar.radio(
        "S√©lectionner un mod√®le",
        ["ResNet50", "EfficientNet"]
    )
    
    # En-t√™te principal
    st.title("Syst√®me de D√©tection de Poux de Mer")
    st.markdown("""
    Ce syst√®me utilise l'intelligence artificielle pour d√©tecter les infections de poux de mer chez les saumons.
    T√©l√©chargez une image de saumon pour l'analyser.
    """)
    
    # Zone de t√©l√©chargement d'image
    uploaded_file = st.file_uploader("Choisir une image...", type=["jpg", "jpeg", "png", "bmp"])
    
    if uploaded_file is not None:
        # Afficher l'image originale
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Image t√©l√©charg√©e")
            image = Image.open(uploaded_file)
            st.image(image, caption="Image originale", use_column_width=True)
        
        # Traiter l'image et faire la pr√©diction
        processed_img, original_img = process_image(uploaded_file)
        
        with st.spinner(f"Analyse en cours avec le mod√®le {model_type}..."):
            is_infected, confidence, prediction = predict_sea_lice(processed_img, model_type)
        
        # Afficher les r√©sultats
        with col2:
            st.subheader("R√©sultat de l'analyse")
            
            if is_infected:
                st.error("**INFECT√â**: Poux de mer d√©tect√©s")
            else:
                st.success("**SAIN**: Aucun poux de mer d√©tect√©")
            
            st.metric("Niveau de confiance", f"{confidence:.1f}%")
            
            # Cr√©er un graphique de probabilit√©
            fig, ax = plt.subplots(figsize=(8, 4))
            categories = ['Sain', 'Infect√©']
            values = [1 - prediction, prediction]
            colors = ['#4CAF50', '#f44336']
            
            ax.bar(categories, values, color=colors)
            ax.set_ylim(0, 1)
            ax.set_ylabel('Probabilit√©')
            ax.set_title('Probabilit√© de classification')
            
            st.pyplot(fig)
    
    # Onglets d'information
    st.markdown("---")
    tab1, tab2, tab3 = st.tabs(["√Ä propos du syst√®me", "Comment √ßa marche", "Limitations"])
    
    with tab1:
        st.header("√Ä propos du Syst√®me de D√©tection de Poux de Mer")
        st.markdown("""
        Ce projet impl√©mente une solution de vision par ordinateur pour d√©tecter les infections de poux de mer dans les exploitations d'√©levage de saumons. 
        Le syst√®me utilise des mod√®les d'apprentissage profond pour analyser les images de saumons et identifier s'ils pr√©sentent des signes d'infection par des poux de mer.
        
        Ce prototype d√©montre la faisabilit√© d'automatiser le processus de d√©tection pour am√©liorer la couverture de surveillance par rapport au processus manuel actuel 
        (qui ne contr√¥le qu'environ 1% des poissons toutes les 24 heures) vers un syst√®me automatis√© plus complet.
        """)
    
    with tab2:
        st.header("Comment √ßa marche")
        st.markdown("""
        Le syst√®me fonctionne en plusieurs √©tapes :
        
        1. **Pr√©traitement de l'image** : L'image t√©l√©charg√©e est redimensionn√©e √† 600x250 pixels et normalis√©e.
        
        2. **Analyse par IA** : L'image pr√©trait√©e est analys√©e par un mod√®le d'apprentissage profond (ResNet50 ou EfficientNet) 
        qui a √©t√© entra√Æn√© pour reconna√Ætre les signes d'infection par des poux de mer.
        
        3. **Classification** : Le mod√®le d√©termine si l'image montre un saumon sain ou infect√©, avec un niveau de confiance associ√©.
        
        4. **Visualisation des r√©sultats** : Les r√©sultats sont pr√©sent√©s avec un code couleur (vert pour sain, rouge pour infect√©) 
        et un graphique montrant les probabilit√©s pour chaque classe.
        """)
    
    with tab3:
        st.header("Limitations actuelles")
        st.markdown("""
        Ce prototype pr√©sente certaines limitations :
        
        1. **Donn√©es synth√©tiques** : Le prototype utilise des donn√©es synth√©tiques qui manquent de la complexit√© et de la variabilit√© des images r√©elles de saumons.
        
        2. **Performance du mod√®le** : La pr√©cision est inf√©rieure √† l'objectif en raison des limitations des donn√©es.
        
        3. **Vitesse de traitement** : L'impl√©mentation actuelle n'est pas optimis√©e pour le traitement vid√©o en temps r√©el.
        
        Avec des donn√©es r√©elles et une optimisation suppl√©mentaire, ce syst√®me pourrait am√©liorer consid√©rablement la couverture de surveillance, 
        passant de 1% actuellement √† potentiellement 100% des poissons, permettant une identification plus rapide des poissons infect√©s 
        et r√©duisant la propagation des poux de mer gr√¢ce √† une intervention pr√©coce.
        """)

if __name__ == "__main__":
    main()
